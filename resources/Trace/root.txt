root:table {
  // Contains textual descriptions of errors that can occur in the library.
  errors:table {
    // 
    ProcessTraceVersionIncorrect:string {
      "Process trace has version \"{version_found}\", but we can only open version \"{version_expected}\"."
    }

    //
    ProcessTraceFailRead:string {
      "Failed to read process trace."
    }
    
    //
    UnknownFileType:string {
      "Don't know how to read file \"{file}\"."
    }
    
    //
    MalformedTraceFile:string {
      "Trace file is malformed."
    }
    
    //
    OutputBlockFail:string {
      "Couldn't create an output block."
    }
    
    //
    OpenFileFail:string {
      "Failed to open trace file: \"{error}\"."
    }

    //
    InputBufferAllocationFail:string {
      "Failed to read file \"{file}\": {error}"
    }

    //
    CreateDirectoryFail:string {
      "Failed to create directory at path: \"{path}\"."
    }

    //
    CurrentPathFail:string {
      "Failed to find the current path."
    }

    //
    FileOutputBufferFail {
      "Couldn't create output buffer for file: \"{path}\"."
    }

    //
    IsDirectoryFail:string {
      "Couldn't determine whether or not a valid directory existed at output path: \"{path}\"."
    }

    //
    ParseBitcodeFileFail:string {
      "Error occurred while parsing bitcode: {error}"
    }

    //
    PathIsNotDirectory:string {
      "Path is not a directory: \"{path}\"."
    }

    //
    OutDirectoryExists:string {
      "Output directory path already exists: \"{path}\"."
    }

    //
    OutputStreamAllocatorFail:string {
      "Failed to construct new OutputStreamAllocator."
    }

    //
    CreateArchiveFail:string {
      "Failed to create archive at \"{path}\"."
    }

    //
    ReadFileForArchiveFail:string {
      "Failed to read trace file \"{path}\" for archiving."
    }

    //
    GetFileSizeFail:string {
      "Failed to get size of trace file \"{path}\"."
    }

    //
    DeleteFilesFail:string {
      "Failed to delete unarchived trace files."
    }
  }
  
  descriptions:table {
    CaughtSignal:string {
      "{name, select, "
        "NULL {Caught unnamed signal ({value}).}"
        "other {Caught signal {name} ({value}): {message}.}"
      "}"
    }
  }
}
